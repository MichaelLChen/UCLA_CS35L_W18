// Ziheng Xu 704756821
// Homework1
// key1.txt


Exercise 1.1:

1. e m a c s SP e x e r 1 . h t m l Enter

2. C-s H T M L Enter

3. C-s s c a v e n g e r M-b

4. C-s s e l f - r e f e r e n t i a l M-b

5. C-s a r r o w M-b

6. C-e

7. C-a

8. Yes, we can reduce number of keystrokes by using C-n, C-p, M-f, and M-b.

9. No, I did not move the cursor with arrow keys.

10. C-x C-c


Exercise 1.2: 

1. e m a c s SP e x e r 2 . h t m l Enter

2. M-g g 1 8 Enter
   C-k

3. C-s D E L E T E - M E
   C-a
   C-k

4. C-s < ! - -
   C-a
   C-k C-k C-k C-k C-k


5. C-s < ! - C-b C-b C-b M-z >
   
   C-s < ! C-a
   C-SP C-n C-n C-n C-n C-w

   C-s < ! C-a C-k


Exercise 1.3:

1. e m a c s SP e x e r 3 . h t m l Enter

2. C-s A M-f C-f 5
   C-s A M-f C-f 5

3. C-s U T C-b M-z 8
   S - A S C I I

4. C-s < o l > Enter Enter

5. C-x C-c y


Exercise 1.4:

1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l

2. e m a c s SP e x e r 4 . h t m l Enter

3. Esc > C-r - < C-f C-SP C-e M-w M-g g 3 7 4 C-y

4. Esc > C-r C-r C-r C-r C-r C-f C-SP C-n C-n C-n C-n C-b C-b M-w
   M-g g 3 6 0 C-y

   M-g g 4 1 3 C-s < ! C-b C-b C-SP M-f M-b C-b C-b C-b M-w
   M-g g 3 5 9 C-e M-b M-b M-f C-y

   M-g g 4 0 2 C-f C-SP M-f M-f C-n C-n M-w
   M-g g 3 2 4 C-y

   M-g g 3 9 5 C-f C-SP C-e M-w
   M-g g 1 1 4 C-y

   M-g g 3 8 6 C-f C-SP C-e M-w
   M-g g 1 8 C-y

5. C-s - - - SP C-a C-SP Esc > C-w

6. C-y

7. - - > C-r C-r C-a < ! - - Enter

8. M-% <ol> <oL> y y y y y y y
   (Replaced 7 occurrences, so there are 7 instances found.)

9. C-x C-y y p
   d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 .
   h t m l SP > e x e r 4 . d i f f


Exercise 1.5:

1. M-x m a k e - d i r e c t o r y Enter j u n k Enter

2. C-x C-f j u n k / h e l l o . c Enter
   (Use cmd+c and cmd+v to copy paste the c code)

3. M-x compile Enter 
   C-a C-k g c c SP - o SP h e l l o - o u t SP h e l l o . c

4. M-x compile Enter
   C-a C-k . / h e l l o - o u t

5. C-x o C-SP Esc-> M-w 
   (swich the window and copy the output below into ~/junk/log.txt)

-*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Fri Jan 12 04:02:50

./hello-out
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  
char n = '%cn';%c  char b \
= '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c 
 printf (p, n, n, n, n, b, n, b\
, b, n, q, n, q, p, q, n, n, n, n);%c 
 return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Fri Jan 12 04:02:50


Exercise 1.6:

1. e m a c s
   C-x b Enter

2. ( r a n d o m )
   C-j

3. ( s e t q SP x SP ( r a n d o m ) )
   C-j

   ( s e t q SP y SP ( r a n d o m ) )
   C-j

4. ( - SP x SP y )
   C-j

   In this case, my first random number x is -2129679242213372820, 
   and my second random number is 594019745517955029.
   My result to the evaluation above is 

   1887987030696060055
   
   This result is not mathematically correct.

5. M-: ( - SP x SP y) Enter
   The output value is the same, but in different ways.
   M-: option also gives me the Octal and Hexadecimal numbers.
   And M-: reads and evaluates the expression in minibuffer.
   The output is shown below:

   1887987030696060055 (#o150633643162113562227, #x1a337a33912ee497)
   
6. These two random numbers are NOT truly random 
   in mathematical sense.
   
   C-h d l i s p r a n d o m Enter
   By using the above command, 
   I saw the documentation for random numbers in Lisp.
   These are not truly random but pseudo-random numbers. 
   Their values are based on various arguments, 
   like systemâ€™s entropy pool if available, 
   less-random volatile data such as the time, 
   or contents of string arguments.

   Also, those random integers in Lisp must be representable 
   due to the limits on different machines. 
   It must be between most-negative-fixnum and most-positive-fixnum.
   So these numbers do have a limit. 
   And they are not truly random mathematically.

7. P(incorrect) = 0.25
   Since we are assuming these two numbers are truly random,
   the remaining thing we need to consider is machines' limits on
   representing integers.
   The result would be incorrect if there exists an overflow.

   With x and y both range from INT_MIN to INT_MAX (inclusive),
   The probability of x-y falls into the same range as above is 0.75.
   (the area between y = x + MIN  
                     y = x + MAX 
                     y = MAX     
                     y = MIN      
                     x = MAX      
                     x = MIN     )

   As a result, the probability of x-y being 
   mathematically incorrect is 1 - 0.75,
   which equals 0.25.




